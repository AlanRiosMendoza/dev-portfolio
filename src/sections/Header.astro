---
import ThemeToggle from "@/components/ThemeToggle.astro";

const navItems = [
    { title: "Experiencia", label: "experiencia", url: "/#experiencia" },
    { title: "Proyectos", label: "proyectos", url: "/#proyectos" },
    { title: "Sobre m√≠", label: "sobre-mi", url: "/#sobre-mi" },
    { title: "Contacto", label: "contacto", url: "mailto:miduga@gmail.com" },
];
---

<header class="fixed top-0 z-10 w-full mt-2">
    <nav
        class="flex items-center justify-center px-4 py-2 mx-auto text-sm font-medium rounded-full shadow-md max-w-fit backdrop-blur-md bg-white/70 dark:bg-gray-800/80 text-gray-700 dark:text-gray-200"
    >
        <div class="flex flex-wrap items-center gap-2">
            {
                navItems.map((link) => (
                    <a
                        class="relative block px-3 py-2 transition-colors hover:text-blue-500 dark:hover:text-blue-400"
                        aria-label={link.label}
                        href={link.url}
                    >
                        {link.title}
                    </a>
                ))
            }
            <ThemeToggle />
        </div>
    </nav>
</header>

<script>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navLinks = document.querySelectorAll("header nav a");

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        navLinks.forEach((link) => {
                            link.classList.toggle(
                                "text-blue-500",
                                link.getAttribute("aria-label") ===
                                    entry.target.id,
                            );
                        });
                    }
                });
            },
            {
                threshold: 0.3,
            },
        );

        sections.forEach((section) => observer.observe(section));

        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") observer.disconnect();
            else sections.forEach((section) => observer.observe(section));
        };
    });
</script>
